// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateServer.proto

#ifndef PROTOBUF_INCLUDED_GateServer_2eproto
#define PROTOBUF_INCLUDED_GateServer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GateServer_2eproto 

namespace protobuf_GateServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GateServer_2eproto
namespace ik_Gate {
class GateRequest;
class GateRequestDefaultTypeInternal;
extern GateRequestDefaultTypeInternal _GateRequest_default_instance_;
class GateResponse;
class GateResponseDefaultTypeInternal;
extern GateResponseDefaultTypeInternal _GateResponse_default_instance_;
}  // namespace ik_Gate
namespace google {
namespace protobuf {
template<> ::ik_Gate::GateRequest* Arena::CreateMaybeMessage<::ik_Gate::GateRequest>(Arena*);
template<> ::ik_Gate::GateResponse* Arena::CreateMaybeMessage<::ik_Gate::GateResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ik_Gate {

// ===================================================================

class GateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_Gate.GateRequest) */ {
 public:
  GateRequest();
  virtual ~GateRequest();

  GateRequest(const GateRequest& from);

  inline GateRequest& operator=(const GateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateRequest(GateRequest&& from) noexcept
    : GateRequest() {
    *this = ::std::move(from);
  }

  inline GateRequest& operator=(GateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateRequest* internal_default_instance() {
    return reinterpret_cast<const GateRequest*>(
               &_GateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GateRequest* other);
  friend void swap(GateRequest& a, GateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateRequest* New() const final {
    return CreateMaybeMessage<GateRequest>(NULL);
  }

  GateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateRequest& from);
  void MergeFrom(const GateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes request_msg = 2;
  void clear_request_msg();
  static const int kRequestMsgFieldNumber = 2;
  const ::std::string& request_msg() const;
  void set_request_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_request_msg(::std::string&& value);
  #endif
  void set_request_msg(const char* value);
  void set_request_msg(const void* value, size_t size);
  ::std::string* mutable_request_msg();
  ::std::string* release_request_msg();
  void set_allocated_request_msg(::std::string* request_msg);

  // @@protoc_insertion_point(class_scope:ik_Gate.GateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr request_msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GateServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_Gate.GateResponse) */ {
 public:
  GateResponse();
  virtual ~GateResponse();

  GateResponse(const GateResponse& from);

  inline GateResponse& operator=(const GateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateResponse(GateResponse&& from) noexcept
    : GateResponse() {
    *this = ::std::move(from);
  }

  inline GateResponse& operator=(GateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateResponse* internal_default_instance() {
    return reinterpret_cast<const GateResponse*>(
               &_GateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GateResponse* other);
  friend void swap(GateResponse& a, GateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateResponse* New() const final {
    return CreateMaybeMessage<GateResponse>(NULL);
  }

  GateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateResponse& from);
  void MergeFrom(const GateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes response_msg = 2;
  void clear_response_msg();
  static const int kResponseMsgFieldNumber = 2;
  const ::std::string& response_msg() const;
  void set_response_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_response_msg(::std::string&& value);
  #endif
  void set_response_msg(const char* value);
  void set_response_msg(const void* value, size_t size);
  ::std::string* mutable_response_msg();
  ::std::string* release_response_msg();
  void set_allocated_response_msg(::std::string* response_msg);

  // @@protoc_insertion_point(class_scope:ik_Gate.GateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr response_msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GateServer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GateRequest

// bytes type = 1;
inline void GateRequest::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateRequest::type() const {
  // @@protoc_insertion_point(field_get:ik_Gate.GateRequest.type)
  return type_.GetNoArena();
}
inline void GateRequest::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_Gate.GateRequest.type)
}
#if LANG_CXX11
inline void GateRequest::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Gate.GateRequest.type)
}
#endif
inline void GateRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Gate.GateRequest.type)
}
inline void GateRequest::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Gate.GateRequest.type)
}
inline ::std::string* GateRequest::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ik_Gate.GateRequest.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateRequest::release_type() {
  // @@protoc_insertion_point(field_release:ik_Gate.GateRequest.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateRequest::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ik_Gate.GateRequest.type)
}

// bytes request_msg = 2;
inline void GateRequest::clear_request_msg() {
  request_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateRequest::request_msg() const {
  // @@protoc_insertion_point(field_get:ik_Gate.GateRequest.request_msg)
  return request_msg_.GetNoArena();
}
inline void GateRequest::set_request_msg(const ::std::string& value) {
  
  request_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_Gate.GateRequest.request_msg)
}
#if LANG_CXX11
inline void GateRequest::set_request_msg(::std::string&& value) {
  
  request_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Gate.GateRequest.request_msg)
}
#endif
inline void GateRequest::set_request_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Gate.GateRequest.request_msg)
}
inline void GateRequest::set_request_msg(const void* value, size_t size) {
  
  request_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Gate.GateRequest.request_msg)
}
inline ::std::string* GateRequest::mutable_request_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_Gate.GateRequest.request_msg)
  return request_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateRequest::release_request_msg() {
  // @@protoc_insertion_point(field_release:ik_Gate.GateRequest.request_msg)
  
  return request_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateRequest::set_allocated_request_msg(::std::string* request_msg) {
  if (request_msg != NULL) {
    
  } else {
    
  }
  request_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_Gate.GateRequest.request_msg)
}

// -------------------------------------------------------------------

// GateResponse

// bytes type = 1;
inline void GateResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateResponse::type() const {
  // @@protoc_insertion_point(field_get:ik_Gate.GateResponse.type)
  return type_.GetNoArena();
}
inline void GateResponse::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_Gate.GateResponse.type)
}
#if LANG_CXX11
inline void GateResponse::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Gate.GateResponse.type)
}
#endif
inline void GateResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Gate.GateResponse.type)
}
inline void GateResponse::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Gate.GateResponse.type)
}
inline ::std::string* GateResponse::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ik_Gate.GateResponse.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateResponse::release_type() {
  // @@protoc_insertion_point(field_release:ik_Gate.GateResponse.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateResponse::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ik_Gate.GateResponse.type)
}

// bytes response_msg = 2;
inline void GateResponse::clear_response_msg() {
  response_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateResponse::response_msg() const {
  // @@protoc_insertion_point(field_get:ik_Gate.GateResponse.response_msg)
  return response_msg_.GetNoArena();
}
inline void GateResponse::set_response_msg(const ::std::string& value) {
  
  response_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_Gate.GateResponse.response_msg)
}
#if LANG_CXX11
inline void GateResponse::set_response_msg(::std::string&& value) {
  
  response_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Gate.GateResponse.response_msg)
}
#endif
inline void GateResponse::set_response_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Gate.GateResponse.response_msg)
}
inline void GateResponse::set_response_msg(const void* value, size_t size) {
  
  response_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Gate.GateResponse.response_msg)
}
inline ::std::string* GateResponse::mutable_response_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_Gate.GateResponse.response_msg)
  return response_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateResponse::release_response_msg() {
  // @@protoc_insertion_point(field_release:ik_Gate.GateResponse.response_msg)
  
  return response_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateResponse::set_allocated_response_msg(::std::string* response_msg) {
  if (response_msg != NULL) {
    
  } else {
    
  }
  response_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_Gate.GateResponse.response_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_Gate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GateServer_2eproto
