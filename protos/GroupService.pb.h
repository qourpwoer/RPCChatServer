// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupService.proto

#ifndef PROTOBUF_INCLUDED_GroupService_2eproto
#define PROTOBUF_INCLUDED_GroupService_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GroupService_2eproto 

namespace protobuf_GroupService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GroupService_2eproto
namespace ik_GroupService {
class AddGroupRequest;
class AddGroupRequestDefaultTypeInternal;
extern AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
class AddGroupResponse;
class AddGroupResponseDefaultTypeInternal;
extern AddGroupResponseDefaultTypeInternal _AddGroupResponse_default_instance_;
class CreateGroupRequest;
class CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
class CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class GetGroupUsersRequest;
class GetGroupUsersRequestDefaultTypeInternal;
extern GetGroupUsersRequestDefaultTypeInternal _GetGroupUsersRequest_default_instance_;
class GetGroupUsersResponse;
class GetGroupUsersResponseDefaultTypeInternal;
extern GetGroupUsersResponseDefaultTypeInternal _GetGroupUsersResponse_default_instance_;
class GetGroupsRequest;
class GetGroupsRequestDefaultTypeInternal;
extern GetGroupsRequestDefaultTypeInternal _GetGroupsRequest_default_instance_;
class GetGroupsResponse;
class GetGroupsResponseDefaultTypeInternal;
extern GetGroupsResponseDefaultTypeInternal _GetGroupsResponse_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class QuitGroupRequest;
class QuitGroupRequestDefaultTypeInternal;
extern QuitGroupRequestDefaultTypeInternal _QuitGroupRequest_default_instance_;
class QuitGroupResponse;
class QuitGroupResponseDefaultTypeInternal;
extern QuitGroupResponseDefaultTypeInternal _QuitGroupResponse_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace ik_GroupService
namespace google {
namespace protobuf {
template<> ::ik_GroupService::AddGroupRequest* Arena::CreateMaybeMessage<::ik_GroupService::AddGroupRequest>(Arena*);
template<> ::ik_GroupService::AddGroupResponse* Arena::CreateMaybeMessage<::ik_GroupService::AddGroupResponse>(Arena*);
template<> ::ik_GroupService::CreateGroupRequest* Arena::CreateMaybeMessage<::ik_GroupService::CreateGroupRequest>(Arena*);
template<> ::ik_GroupService::CreateGroupResponse* Arena::CreateMaybeMessage<::ik_GroupService::CreateGroupResponse>(Arena*);
template<> ::ik_GroupService::GetGroupUsersRequest* Arena::CreateMaybeMessage<::ik_GroupService::GetGroupUsersRequest>(Arena*);
template<> ::ik_GroupService::GetGroupUsersResponse* Arena::CreateMaybeMessage<::ik_GroupService::GetGroupUsersResponse>(Arena*);
template<> ::ik_GroupService::GetGroupsRequest* Arena::CreateMaybeMessage<::ik_GroupService::GetGroupsRequest>(Arena*);
template<> ::ik_GroupService::GetGroupsResponse* Arena::CreateMaybeMessage<::ik_GroupService::GetGroupsResponse>(Arena*);
template<> ::ik_GroupService::GroupInfo* Arena::CreateMaybeMessage<::ik_GroupService::GroupInfo>(Arena*);
template<> ::ik_GroupService::QuitGroupRequest* Arena::CreateMaybeMessage<::ik_GroupService::QuitGroupRequest>(Arena*);
template<> ::ik_GroupService::QuitGroupResponse* Arena::CreateMaybeMessage<::ik_GroupService::QuitGroupResponse>(Arena*);
template<> ::ik_GroupService::UserInfo* Arena::CreateMaybeMessage<::ik_GroupService::UserInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ik_GroupService {

// ===================================================================

class AddGroupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.AddGroupRequest) */ {
 public:
  AddGroupRequest();
  virtual ~AddGroupRequest();

  AddGroupRequest(const AddGroupRequest& from);

  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddGroupRequest(AddGroupRequest&& from) noexcept
    : AddGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupRequest& operator=(AddGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupRequest*>(
               &_AddGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddGroupRequest* other);
  friend void swap(AddGroupRequest& a, AddGroupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddGroupRequest* New() const final {
    return CreateMaybeMessage<AddGroupRequest>(NULL);
  }

  AddGroupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddGroupRequest& from);
  void MergeFrom(const AddGroupRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 groupid = 2;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.AddGroupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddGroupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.AddGroupResponse) */ {
 public:
  AddGroupResponse();
  virtual ~AddGroupResponse();

  AddGroupResponse(const AddGroupResponse& from);

  inline AddGroupResponse& operator=(const AddGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddGroupResponse(AddGroupResponse&& from) noexcept
    : AddGroupResponse() {
    *this = ::std::move(from);
  }

  inline AddGroupResponse& operator=(AddGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddGroupResponse*>(
               &_AddGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddGroupResponse* other);
  friend void swap(AddGroupResponse& a, AddGroupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddGroupResponse* New() const final {
    return CreateMaybeMessage<AddGroupResponse>(NULL);
  }

  AddGroupResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddGroupResponse& from);
  void MergeFrom(const AddGroupResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes err_msg = 2;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const void* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.AddGroupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateGroupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.CreateGroupRequest) */ {
 public:
  CreateGroupRequest();
  virtual ~CreateGroupRequest();

  CreateGroupRequest(const CreateGroupRequest& from);

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateGroupRequest* other);
  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRequest* New() const final {
    return CreateMaybeMessage<CreateGroupRequest>(NULL);
  }

  CreateGroupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateGroupRequest& from);
  void MergeFrom(const CreateGroupRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes groupname = 2;
  void clear_groupname();
  static const int kGroupnameFieldNumber = 2;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // bytes groupdesc = 3;
  void clear_groupdesc();
  static const int kGroupdescFieldNumber = 3;
  const ::std::string& groupdesc() const;
  void set_groupdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_groupdesc(::std::string&& value);
  #endif
  void set_groupdesc(const char* value);
  void set_groupdesc(const void* value, size_t size);
  ::std::string* mutable_groupdesc();
  ::std::string* release_groupdesc();
  void set_allocated_groupdesc(::std::string* groupdesc);

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.CreateGroupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr groupdesc_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateGroupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.CreateGroupResponse) */ {
 public:
  CreateGroupResponse();
  virtual ~CreateGroupResponse();

  CreateGroupResponse(const CreateGroupResponse& from);

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateGroupResponse* other);
  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupResponse* New() const final {
    return CreateMaybeMessage<CreateGroupResponse>(NULL);
  }

  CreateGroupResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateGroupResponse& from);
  void MergeFrom(const CreateGroupResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes err_msg = 3;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const void* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.CreateGroupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  bool is_success_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitGroupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.QuitGroupRequest) */ {
 public:
  QuitGroupRequest();
  virtual ~QuitGroupRequest();

  QuitGroupRequest(const QuitGroupRequest& from);

  inline QuitGroupRequest& operator=(const QuitGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuitGroupRequest(QuitGroupRequest&& from) noexcept
    : QuitGroupRequest() {
    *this = ::std::move(from);
  }

  inline QuitGroupRequest& operator=(QuitGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGroupRequest* internal_default_instance() {
    return reinterpret_cast<const QuitGroupRequest*>(
               &_QuitGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(QuitGroupRequest* other);
  friend void swap(QuitGroupRequest& a, QuitGroupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuitGroupRequest* New() const final {
    return CreateMaybeMessage<QuitGroupRequest>(NULL);
  }

  QuitGroupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuitGroupRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuitGroupRequest& from);
  void MergeFrom(const QuitGroupRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 groupid = 2;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.QuitGroupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitGroupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.QuitGroupResponse) */ {
 public:
  QuitGroupResponse();
  virtual ~QuitGroupResponse();

  QuitGroupResponse(const QuitGroupResponse& from);

  inline QuitGroupResponse& operator=(const QuitGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuitGroupResponse(QuitGroupResponse&& from) noexcept
    : QuitGroupResponse() {
    *this = ::std::move(from);
  }

  inline QuitGroupResponse& operator=(QuitGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGroupResponse* internal_default_instance() {
    return reinterpret_cast<const QuitGroupResponse*>(
               &_QuitGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(QuitGroupResponse* other);
  friend void swap(QuitGroupResponse& a, QuitGroupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuitGroupResponse* New() const final {
    return CreateMaybeMessage<QuitGroupResponse>(NULL);
  }

  QuitGroupResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuitGroupResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuitGroupResponse& from);
  void MergeFrom(const QuitGroupResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes err_msg = 2;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const void* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.QuitGroupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupUsersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.GetGroupUsersRequest) */ {
 public:
  GetGroupUsersRequest();
  virtual ~GetGroupUsersRequest();

  GetGroupUsersRequest(const GetGroupUsersRequest& from);

  inline GetGroupUsersRequest& operator=(const GetGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupUsersRequest(GetGroupUsersRequest&& from) noexcept
    : GetGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupUsersRequest& operator=(GetGroupUsersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupUsersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupUsersRequest*>(
               &_GetGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetGroupUsersRequest* other);
  friend void swap(GetGroupUsersRequest& a, GetGroupUsersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupUsersRequest* New() const final {
    return CreateMaybeMessage<GetGroupUsersRequest>(NULL);
  }

  GetGroupUsersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGroupUsersRequest& from);
  void MergeFrom(const GetGroupUsersRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupUsersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 groupid = 1;
  void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.GetGroupUsersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes grouprole = 3;
  void clear_grouprole();
  static const int kGrouproleFieldNumber = 3;
  const ::std::string& grouprole() const;
  void set_grouprole(const ::std::string& value);
  #if LANG_CXX11
  void set_grouprole(::std::string&& value);
  #endif
  void set_grouprole(const char* value);
  void set_grouprole(const void* value, size_t size);
  ::std::string* mutable_grouprole();
  ::std::string* release_grouprole();
  void set_allocated_grouprole(::std::string* grouprole);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr grouprole_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupUsersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.GetGroupUsersResponse) */ {
 public:
  GetGroupUsersResponse();
  virtual ~GetGroupUsersResponse();

  GetGroupUsersResponse(const GetGroupUsersResponse& from);

  inline GetGroupUsersResponse& operator=(const GetGroupUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupUsersResponse(GetGroupUsersResponse&& from) noexcept
    : GetGroupUsersResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupUsersResponse& operator=(GetGroupUsersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupUsersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupUsersResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupUsersResponse*>(
               &_GetGroupUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetGroupUsersResponse* other);
  friend void swap(GetGroupUsersResponse& a, GetGroupUsersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupUsersResponse* New() const final {
    return CreateMaybeMessage<GetGroupUsersResponse>(NULL);
  }

  GetGroupUsersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupUsersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGroupUsersResponse& from);
  void MergeFrom(const GetGroupUsersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupUsersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ik_GroupService.UserInfo users = 2;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  ::ik_GroupService::UserInfo* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo >*
      mutable_users();
  const ::ik_GroupService::UserInfo& users(int index) const;
  ::ik_GroupService::UserInfo* add_users();
  const ::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo >&
      users() const;

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.GetGroupUsersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo > users_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.GetGroupsRequest) */ {
 public:
  GetGroupsRequest();
  virtual ~GetGroupsRequest();

  GetGroupsRequest(const GetGroupsRequest& from);

  inline GetGroupsRequest& operator=(const GetGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupsRequest(GetGroupsRequest&& from) noexcept
    : GetGroupsRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupsRequest& operator=(GetGroupsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRequest*>(
               &_GetGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetGroupsRequest* other);
  friend void swap(GetGroupsRequest& a, GetGroupsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsRequest* New() const final {
    return CreateMaybeMessage<GetGroupsRequest>(NULL);
  }

  GetGroupsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGroupsRequest& from);
  void MergeFrom(const GetGroupsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.GetGroupsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GroupInfo* other);
  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return CreateMaybeMessage<GroupInfo>(NULL);
  }

  GroupInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes groupname = 2;
  void clear_groupname();
  static const int kGroupnameFieldNumber = 2;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // bytes groupdesc = 3;
  void clear_groupdesc();
  static const int kGroupdescFieldNumber = 3;
  const ::std::string& groupdesc() const;
  void set_groupdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_groupdesc(::std::string&& value);
  #endif
  void set_groupdesc(const char* value);
  void set_groupdesc(const void* value, size_t size);
  ::std::string* mutable_groupdesc();
  ::std::string* release_groupdesc();
  void set_allocated_groupdesc(::std::string* groupdesc);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.GroupInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr groupdesc_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_GroupService.GetGroupsResponse) */ {
 public:
  GetGroupsResponse();
  virtual ~GetGroupsResponse();

  GetGroupsResponse(const GetGroupsResponse& from);

  inline GetGroupsResponse& operator=(const GetGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupsResponse(GetGroupsResponse&& from) noexcept
    : GetGroupsResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupsResponse& operator=(GetGroupsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupsResponse*>(
               &_GetGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetGroupsResponse* other);
  friend void swap(GetGroupsResponse& a, GetGroupsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsResponse* New() const final {
    return CreateMaybeMessage<GetGroupsResponse>(NULL);
  }

  GetGroupsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGroupsResponse& from);
  void MergeFrom(const GetGroupsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ik_GroupService.GroupInfo groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  ::ik_GroupService::GroupInfo* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::ik_GroupService::GroupInfo >*
      mutable_groups();
  const ::ik_GroupService::GroupInfo& groups(int index) const;
  ::ik_GroupService::GroupInfo* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::ik_GroupService::GroupInfo >&
      groups() const;

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:ik_GroupService.GetGroupsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ik_GroupService::GroupInfo > groups_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GroupService_2eproto::TableStruct;
};
// ===================================================================

class GroupServiceRpc_Stub;

class GroupServiceRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GroupServiceRpc() {};
 public:
  virtual ~GroupServiceRpc();

  typedef GroupServiceRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void AddGroup(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::AddGroupRequest* request,
                       ::ik_GroupService::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateGroup(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::CreateGroupRequest* request,
                       ::ik_GroupService::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QuitGroup(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::QuitGroupRequest* request,
                       ::ik_GroupService::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroupUsers(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::GetGroupUsersRequest* request,
                       ::ik_GroupService::GetGroupUsersResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroups(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::GetGroupsRequest* request,
                       ::ik_GroupService::GetGroupsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc);
};

class GroupServiceRpc_Stub : public GroupServiceRpc {
 public:
  GroupServiceRpc_Stub(::google::protobuf::RpcChannel* channel);
  GroupServiceRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~GroupServiceRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements GroupServiceRpc ------------------------------------------

  void AddGroup(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::AddGroupRequest* request,
                       ::ik_GroupService::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateGroup(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::CreateGroupRequest* request,
                       ::ik_GroupService::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QuitGroup(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::QuitGroupRequest* request,
                       ::ik_GroupService::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroupUsers(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::GetGroupUsersRequest* request,
                       ::ik_GroupService::GetGroupUsersResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroups(::google::protobuf::RpcController* controller,
                       const ::ik_GroupService::GetGroupsRequest* request,
                       ::ik_GroupService::GetGroupsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddGroupRequest

// int32 userid = 1;
inline void AddGroupRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 AddGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.AddGroupRequest.userid)
  return userid_;
}
inline void AddGroupRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.AddGroupRequest.userid)
}

// int32 groupid = 2;
inline void AddGroupRequest::clear_groupid() {
  groupid_ = 0;
}
inline ::google::protobuf::int32 AddGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.AddGroupRequest.groupid)
  return groupid_;
}
inline void AddGroupRequest::set_groupid(::google::protobuf::int32 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.AddGroupRequest.groupid)
}

// -------------------------------------------------------------------

// AddGroupResponse

// bool is_success = 1;
inline void AddGroupResponse::clear_is_success() {
  is_success_ = false;
}
inline bool AddGroupResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.AddGroupResponse.is_success)
  return is_success_;
}
inline void AddGroupResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.AddGroupResponse.is_success)
}

// bytes err_msg = 2;
inline void AddGroupResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddGroupResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.AddGroupResponse.err_msg)
  return err_msg_.GetNoArena();
}
inline void AddGroupResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.AddGroupResponse.err_msg)
}
#if LANG_CXX11
inline void AddGroupResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.AddGroupResponse.err_msg)
}
#endif
inline void AddGroupResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.AddGroupResponse.err_msg)
}
inline void AddGroupResponse::set_err_msg(const void* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.AddGroupResponse.err_msg)
}
inline ::std::string* AddGroupResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.AddGroupResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddGroupResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:ik_GroupService.AddGroupResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.AddGroupResponse.err_msg)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// int32 userid = 1;
inline void CreateGroupRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 CreateGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupRequest.userid)
  return userid_;
}
inline void CreateGroupRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupRequest.userid)
}

// bytes groupname = 2;
inline void CreateGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupRequest.groupname)
  return groupname_.GetNoArena();
}
inline void CreateGroupRequest::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupRequest.groupname)
}
#if LANG_CXX11
inline void CreateGroupRequest::set_groupname(::std::string&& value) {
  
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.CreateGroupRequest.groupname)
}
#endif
inline void CreateGroupRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.CreateGroupRequest.groupname)
}
inline void CreateGroupRequest::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.CreateGroupRequest.groupname)
}
inline ::std::string* CreateGroupRequest::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.CreateGroupRequest.groupname)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:ik_GroupService.CreateGroupRequest.groupname)
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.CreateGroupRequest.groupname)
}

// bytes groupdesc = 3;
inline void CreateGroupRequest::clear_groupdesc() {
  groupdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupRequest::groupdesc() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupRequest.groupdesc)
  return groupdesc_.GetNoArena();
}
inline void CreateGroupRequest::set_groupdesc(const ::std::string& value) {
  
  groupdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupRequest.groupdesc)
}
#if LANG_CXX11
inline void CreateGroupRequest::set_groupdesc(::std::string&& value) {
  
  groupdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.CreateGroupRequest.groupdesc)
}
#endif
inline void CreateGroupRequest::set_groupdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.CreateGroupRequest.groupdesc)
}
inline void CreateGroupRequest::set_groupdesc(const void* value, size_t size) {
  
  groupdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.CreateGroupRequest.groupdesc)
}
inline ::std::string* CreateGroupRequest::mutable_groupdesc() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.CreateGroupRequest.groupdesc)
  return groupdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupRequest::release_groupdesc() {
  // @@protoc_insertion_point(field_release:ik_GroupService.CreateGroupRequest.groupdesc)
  
  return groupdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_groupdesc(::std::string* groupdesc) {
  if (groupdesc != NULL) {
    
  } else {
    
  }
  groupdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupdesc);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.CreateGroupRequest.groupdesc)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// bool is_success = 1;
inline void CreateGroupResponse::clear_is_success() {
  is_success_ = false;
}
inline bool CreateGroupResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupResponse.is_success)
  return is_success_;
}
inline void CreateGroupResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupResponse.is_success)
}

// int32 id = 2;
inline void CreateGroupResponse::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CreateGroupResponse::id() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupResponse.id)
  return id_;
}
inline void CreateGroupResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupResponse.id)
}

// bytes err_msg = 3;
inline void CreateGroupResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupResponse.err_msg)
  return err_msg_.GetNoArena();
}
inline void CreateGroupResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupResponse.err_msg)
}
#if LANG_CXX11
inline void CreateGroupResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.CreateGroupResponse.err_msg)
}
#endif
inline void CreateGroupResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.CreateGroupResponse.err_msg)
}
inline void CreateGroupResponse::set_err_msg(const void* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.CreateGroupResponse.err_msg)
}
inline ::std::string* CreateGroupResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.CreateGroupResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:ik_GroupService.CreateGroupResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.CreateGroupResponse.err_msg)
}

// -------------------------------------------------------------------

// QuitGroupRequest

// int32 userid = 1;
inline void QuitGroupRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 QuitGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.QuitGroupRequest.userid)
  return userid_;
}
inline void QuitGroupRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.QuitGroupRequest.userid)
}

// int32 groupid = 2;
inline void QuitGroupRequest::clear_groupid() {
  groupid_ = 0;
}
inline ::google::protobuf::int32 QuitGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.QuitGroupRequest.groupid)
  return groupid_;
}
inline void QuitGroupRequest::set_groupid(::google::protobuf::int32 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.QuitGroupRequest.groupid)
}

// -------------------------------------------------------------------

// QuitGroupResponse

// bool is_success = 1;
inline void QuitGroupResponse::clear_is_success() {
  is_success_ = false;
}
inline bool QuitGroupResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.QuitGroupResponse.is_success)
  return is_success_;
}
inline void QuitGroupResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.QuitGroupResponse.is_success)
}

// bytes err_msg = 2;
inline void QuitGroupResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuitGroupResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.QuitGroupResponse.err_msg)
  return err_msg_.GetNoArena();
}
inline void QuitGroupResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.QuitGroupResponse.err_msg)
}
#if LANG_CXX11
inline void QuitGroupResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.QuitGroupResponse.err_msg)
}
#endif
inline void QuitGroupResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.QuitGroupResponse.err_msg)
}
inline void QuitGroupResponse::set_err_msg(const void* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.QuitGroupResponse.err_msg)
}
inline ::std::string* QuitGroupResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.QuitGroupResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuitGroupResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:ik_GroupService.QuitGroupResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuitGroupResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.QuitGroupResponse.err_msg)
}

// -------------------------------------------------------------------

// GetGroupUsersRequest

// int32 groupid = 1;
inline void GetGroupUsersRequest::clear_groupid() {
  groupid_ = 0;
}
inline ::google::protobuf::int32 GetGroupUsersRequest::groupid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupUsersRequest.groupid)
  return groupid_;
}
inline void GetGroupUsersRequest::set_groupid(::google::protobuf::int32 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.GetGroupUsersRequest.groupid)
}

// -------------------------------------------------------------------

// UserInfo

// int32 id = 1;
inline void UserInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.UserInfo.id)
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.UserInfo.id)
}

// bytes name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.UserInfo.name)
}
inline void UserInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:ik_GroupService.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.UserInfo.name)
}

// bytes grouprole = 3;
inline void UserInfo::clear_grouprole() {
  grouprole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::grouprole() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.UserInfo.grouprole)
  return grouprole_.GetNoArena();
}
inline void UserInfo::set_grouprole(const ::std::string& value) {
  
  grouprole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.UserInfo.grouprole)
}
#if LANG_CXX11
inline void UserInfo::set_grouprole(::std::string&& value) {
  
  grouprole_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.UserInfo.grouprole)
}
#endif
inline void UserInfo::set_grouprole(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  grouprole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.UserInfo.grouprole)
}
inline void UserInfo::set_grouprole(const void* value, size_t size) {
  
  grouprole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.UserInfo.grouprole)
}
inline ::std::string* UserInfo::mutable_grouprole() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.UserInfo.grouprole)
  return grouprole_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_grouprole() {
  // @@protoc_insertion_point(field_release:ik_GroupService.UserInfo.grouprole)
  
  return grouprole_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_grouprole(::std::string* grouprole) {
  if (grouprole != NULL) {
    
  } else {
    
  }
  grouprole_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grouprole);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.UserInfo.grouprole)
}

// -------------------------------------------------------------------

// GetGroupUsersResponse

// bool is_success = 1;
inline void GetGroupUsersResponse::clear_is_success() {
  is_success_ = false;
}
inline bool GetGroupUsersResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupUsersResponse.is_success)
  return is_success_;
}
inline void GetGroupUsersResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.GetGroupUsersResponse.is_success)
}

// repeated .ik_GroupService.UserInfo users = 2;
inline int GetGroupUsersResponse::users_size() const {
  return users_.size();
}
inline void GetGroupUsersResponse::clear_users() {
  users_.Clear();
}
inline ::ik_GroupService::UserInfo* GetGroupUsersResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:ik_GroupService.GetGroupUsersResponse.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo >*
GetGroupUsersResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:ik_GroupService.GetGroupUsersResponse.users)
  return &users_;
}
inline const ::ik_GroupService::UserInfo& GetGroupUsersResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupUsersResponse.users)
  return users_.Get(index);
}
inline ::ik_GroupService::UserInfo* GetGroupUsersResponse::add_users() {
  // @@protoc_insertion_point(field_add:ik_GroupService.GetGroupUsersResponse.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo >&
GetGroupUsersResponse::users() const {
  // @@protoc_insertion_point(field_list:ik_GroupService.GetGroupUsersResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// GetGroupsRequest

// int32 userid = 1;
inline void GetGroupsRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GetGroupsRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupsRequest.userid)
  return userid_;
}
inline void GetGroupsRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.GetGroupsRequest.userid)
}

// -------------------------------------------------------------------

// GroupInfo

// int32 id = 1;
inline void GroupInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 GroupInfo::id() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GroupInfo.id)
  return id_;
}
inline void GroupInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.GroupInfo.id)
}

// bytes groupname = 2;
inline void GroupInfo::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GroupInfo.groupname)
  return groupname_.GetNoArena();
}
inline void GroupInfo::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.GroupInfo.groupname)
}
#if LANG_CXX11
inline void GroupInfo::set_groupname(::std::string&& value) {
  
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.GroupInfo.groupname)
}
#endif
inline void GroupInfo::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.GroupInfo.groupname)
}
inline void GroupInfo::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.GroupInfo.groupname)
}
inline ::std::string* GroupInfo::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.GroupInfo.groupname)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:ik_GroupService.GroupInfo.groupname)
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.GroupInfo.groupname)
}

// bytes groupdesc = 3;
inline void GroupInfo::clear_groupdesc() {
  groupdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::groupdesc() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GroupInfo.groupdesc)
  return groupdesc_.GetNoArena();
}
inline void GroupInfo::set_groupdesc(const ::std::string& value) {
  
  groupdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.GroupInfo.groupdesc)
}
#if LANG_CXX11
inline void GroupInfo::set_groupdesc(::std::string&& value) {
  
  groupdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_GroupService.GroupInfo.groupdesc)
}
#endif
inline void GroupInfo::set_groupdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.GroupInfo.groupdesc)
}
inline void GroupInfo::set_groupdesc(const void* value, size_t size) {
  
  groupdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.GroupInfo.groupdesc)
}
inline ::std::string* GroupInfo::mutable_groupdesc() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.GroupInfo.groupdesc)
  return groupdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_groupdesc() {
  // @@protoc_insertion_point(field_release:ik_GroupService.GroupInfo.groupdesc)
  
  return groupdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_groupdesc(::std::string* groupdesc) {
  if (groupdesc != NULL) {
    
  } else {
    
  }
  groupdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupdesc);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.GroupInfo.groupdesc)
}

// -------------------------------------------------------------------

// GetGroupsResponse

// bool is_success = 1;
inline void GetGroupsResponse::clear_is_success() {
  is_success_ = false;
}
inline bool GetGroupsResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupsResponse.is_success)
  return is_success_;
}
inline void GetGroupsResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.GetGroupsResponse.is_success)
}

// repeated .ik_GroupService.GroupInfo groups = 2;
inline int GetGroupsResponse::groups_size() const {
  return groups_.size();
}
inline void GetGroupsResponse::clear_groups() {
  groups_.Clear();
}
inline ::ik_GroupService::GroupInfo* GetGroupsResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:ik_GroupService.GetGroupsResponse.groups)
  return groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ik_GroupService::GroupInfo >*
GetGroupsResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:ik_GroupService.GetGroupsResponse.groups)
  return &groups_;
}
inline const ::ik_GroupService::GroupInfo& GetGroupsResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupsResponse.groups)
  return groups_.Get(index);
}
inline ::ik_GroupService::GroupInfo* GetGroupsResponse::add_groups() {
  // @@protoc_insertion_point(field_add:ik_GroupService.GetGroupsResponse.groups)
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ik_GroupService::GroupInfo >&
GetGroupsResponse::groups() const {
  // @@protoc_insertion_point(field_list:ik_GroupService.GetGroupsResponse.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_GroupService

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GroupService_2eproto
