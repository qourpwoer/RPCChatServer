// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatService.proto

#ifndef PROTOBUF_INCLUDED_ChatService_2eproto
#define PROTOBUF_INCLUDED_ChatService_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ChatService_2eproto 

namespace protobuf_ChatService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ChatService_2eproto
namespace ik_ChatService {
class ChatMsg;
class ChatMsgDefaultTypeInternal;
extern ChatMsgDefaultTypeInternal _ChatMsg_default_instance_;
class GroupChatRequest;
class GroupChatRequestDefaultTypeInternal;
extern GroupChatRequestDefaultTypeInternal _GroupChatRequest_default_instance_;
class OneChatRequest;
class OneChatRequestDefaultTypeInternal;
extern OneChatRequestDefaultTypeInternal _OneChatRequest_default_instance_;
}  // namespace ik_ChatService
namespace google {
namespace protobuf {
template<> ::ik_ChatService::ChatMsg* Arena::CreateMaybeMessage<::ik_ChatService::ChatMsg>(Arena*);
template<> ::ik_ChatService::GroupChatRequest* Arena::CreateMaybeMessage<::ik_ChatService::GroupChatRequest>(Arena*);
template<> ::ik_ChatService::OneChatRequest* Arena::CreateMaybeMessage<::ik_ChatService::OneChatRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ik_ChatService {

// ===================================================================

class OneChatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_ChatService.OneChatRequest) */ {
 public:
  OneChatRequest();
  virtual ~OneChatRequest();

  OneChatRequest(const OneChatRequest& from);

  inline OneChatRequest& operator=(const OneChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneChatRequest(OneChatRequest&& from) noexcept
    : OneChatRequest() {
    *this = ::std::move(from);
  }

  inline OneChatRequest& operator=(OneChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneChatRequest* internal_default_instance() {
    return reinterpret_cast<const OneChatRequest*>(
               &_OneChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OneChatRequest* other);
  friend void swap(OneChatRequest& a, OneChatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneChatRequest* New() const final {
    return CreateMaybeMessage<OneChatRequest>(NULL);
  }

  OneChatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneChatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneChatRequest& from);
  void MergeFrom(const OneChatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneChatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // bytes msg = 4;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 toid = 2;
  void clear_toid();
  static const int kToidFieldNumber = 2;
  ::google::protobuf::int32 toid() const;
  void set_toid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_ChatService.OneChatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 toid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChatService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupChatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_ChatService.GroupChatRequest) */ {
 public:
  GroupChatRequest();
  virtual ~GroupChatRequest();

  GroupChatRequest(const GroupChatRequest& from);

  inline GroupChatRequest& operator=(const GroupChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupChatRequest(GroupChatRequest&& from) noexcept
    : GroupChatRequest() {
    *this = ::std::move(from);
  }

  inline GroupChatRequest& operator=(GroupChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatRequest* internal_default_instance() {
    return reinterpret_cast<const GroupChatRequest*>(
               &_GroupChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GroupChatRequest* other);
  friend void swap(GroupChatRequest& a, GroupChatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChatRequest* New() const final {
    return CreateMaybeMessage<GroupChatRequest>(NULL);
  }

  GroupChatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroupChatRequest& from);
  void MergeFrom(const GroupChatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // bytes msg = 4;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 groupid = 2;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_ChatService.GroupChatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChatService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_ChatService.ChatMsg) */ {
 public:
  ChatMsg();
  virtual ~ChatMsg();

  ChatMsg(const ChatMsg& from);

  inline ChatMsg& operator=(const ChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMsg(ChatMsg&& from) noexcept
    : ChatMsg() {
    *this = ::std::move(from);
  }

  inline ChatMsg& operator=(ChatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMsg* internal_default_instance() {
    return reinterpret_cast<const ChatMsg*>(
               &_ChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ChatMsg* other);
  friend void swap(ChatMsg& a, ChatMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMsg* New() const final {
    return CreateMaybeMessage<ChatMsg>(NULL);
  }

  ChatMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMsg& from);
  void MergeFrom(const ChatMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes username = 4;
  void clear_username();
  static const int kUsernameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes msg = 5;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // bytes time = 7;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // bool is_group = 1;
  void clear_is_group();
  static const int kIsGroupFieldNumber = 1;
  bool is_group() const;
  void set_is_group(bool value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 toid = 3;
  void clear_toid();
  static const int kToidFieldNumber = 3;
  ::google::protobuf::int32 toid() const;
  void set_toid(::google::protobuf::int32 value);

  // int32 groupid = 6;
  void clear_groupid();
  static const int kGroupidFieldNumber = 6;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_ChatService.ChatMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  bool is_group_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 toid_;
  ::google::protobuf::int32 groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChatService_2eproto::TableStruct;
};
// ===================================================================

class ChatServiceRpc_Stub;

class ChatServiceRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChatServiceRpc() {};
 public:
  virtual ~ChatServiceRpc();

  typedef ChatServiceRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void OneChat(::google::protobuf::RpcController* controller,
                       const ::ik_ChatService::OneChatRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);
  virtual void GroupChat(::google::protobuf::RpcController* controller,
                       const ::ik_ChatService::GroupChatRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc);
};

class ChatServiceRpc_Stub : public ChatServiceRpc {
 public:
  ChatServiceRpc_Stub(::google::protobuf::RpcChannel* channel);
  ChatServiceRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ChatServiceRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ChatServiceRpc ------------------------------------------

  void OneChat(::google::protobuf::RpcController* controller,
                       const ::ik_ChatService::OneChatRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);
  void GroupChat(::google::protobuf::RpcController* controller,
                       const ::ik_ChatService::GroupChatRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OneChatRequest

// int32 id = 1;
inline void OneChatRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 OneChatRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.OneChatRequest.id)
  return id_;
}
inline void OneChatRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.OneChatRequest.id)
}

// int32 toid = 2;
inline void OneChatRequest::clear_toid() {
  toid_ = 0;
}
inline ::google::protobuf::int32 OneChatRequest::toid() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.OneChatRequest.toid)
  return toid_;
}
inline void OneChatRequest::set_toid(::google::protobuf::int32 value) {
  
  toid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.OneChatRequest.toid)
}

// bytes time = 3;
inline void OneChatRequest::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OneChatRequest::time() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.OneChatRequest.time)
  return time_.GetNoArena();
}
inline void OneChatRequest::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.OneChatRequest.time)
}
#if LANG_CXX11
inline void OneChatRequest::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.OneChatRequest.time)
}
#endif
inline void OneChatRequest::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.OneChatRequest.time)
}
inline void OneChatRequest::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.OneChatRequest.time)
}
inline ::std::string* OneChatRequest::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.OneChatRequest.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneChatRequest::release_time() {
  // @@protoc_insertion_point(field_release:ik_ChatService.OneChatRequest.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneChatRequest::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.OneChatRequest.time)
}

// bytes msg = 4;
inline void OneChatRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OneChatRequest::msg() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.OneChatRequest.msg)
  return msg_.GetNoArena();
}
inline void OneChatRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.OneChatRequest.msg)
}
#if LANG_CXX11
inline void OneChatRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.OneChatRequest.msg)
}
#endif
inline void OneChatRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.OneChatRequest.msg)
}
inline void OneChatRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.OneChatRequest.msg)
}
inline ::std::string* OneChatRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.OneChatRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneChatRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ik_ChatService.OneChatRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneChatRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.OneChatRequest.msg)
}

// -------------------------------------------------------------------

// GroupChatRequest

// int32 userid = 1;
inline void GroupChatRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GroupChatRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.GroupChatRequest.userid)
  return userid_;
}
inline void GroupChatRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.GroupChatRequest.userid)
}

// int32 groupid = 2;
inline void GroupChatRequest::clear_groupid() {
  groupid_ = 0;
}
inline ::google::protobuf::int32 GroupChatRequest::groupid() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.GroupChatRequest.groupid)
  return groupid_;
}
inline void GroupChatRequest::set_groupid(::google::protobuf::int32 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.GroupChatRequest.groupid)
}

// bytes time = 3;
inline void GroupChatRequest::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatRequest::time() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.GroupChatRequest.time)
  return time_.GetNoArena();
}
inline void GroupChatRequest::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.GroupChatRequest.time)
}
#if LANG_CXX11
inline void GroupChatRequest::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.GroupChatRequest.time)
}
#endif
inline void GroupChatRequest::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.GroupChatRequest.time)
}
inline void GroupChatRequest::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.GroupChatRequest.time)
}
inline ::std::string* GroupChatRequest::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.GroupChatRequest.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatRequest::release_time() {
  // @@protoc_insertion_point(field_release:ik_ChatService.GroupChatRequest.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatRequest::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.GroupChatRequest.time)
}

// bytes msg = 4;
inline void GroupChatRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatRequest::msg() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.GroupChatRequest.msg)
  return msg_.GetNoArena();
}
inline void GroupChatRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.GroupChatRequest.msg)
}
#if LANG_CXX11
inline void GroupChatRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.GroupChatRequest.msg)
}
#endif
inline void GroupChatRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.GroupChatRequest.msg)
}
inline void GroupChatRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.GroupChatRequest.msg)
}
inline ::std::string* GroupChatRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.GroupChatRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ik_ChatService.GroupChatRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.GroupChatRequest.msg)
}

// -------------------------------------------------------------------

// ChatMsg

// bool is_group = 1;
inline void ChatMsg::clear_is_group() {
  is_group_ = false;
}
inline bool ChatMsg::is_group() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.is_group)
  return is_group_;
}
inline void ChatMsg::set_is_group(bool value) {
  
  is_group_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.is_group)
}

// int32 id = 2;
inline void ChatMsg::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ChatMsg::id() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.id)
  return id_;
}
inline void ChatMsg::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.id)
}

// int32 toid = 3;
inline void ChatMsg::clear_toid() {
  toid_ = 0;
}
inline ::google::protobuf::int32 ChatMsg::toid() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.toid)
  return toid_;
}
inline void ChatMsg::set_toid(::google::protobuf::int32 value) {
  
  toid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.toid)
}

// bytes username = 4;
inline void ChatMsg::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMsg::username() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.username)
  return username_.GetNoArena();
}
inline void ChatMsg::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.username)
}
#if LANG_CXX11
inline void ChatMsg::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.ChatMsg.username)
}
#endif
inline void ChatMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.ChatMsg.username)
}
inline void ChatMsg::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.ChatMsg.username)
}
inline ::std::string* ChatMsg::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.ChatMsg.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMsg::release_username() {
  // @@protoc_insertion_point(field_release:ik_ChatService.ChatMsg.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.ChatMsg.username)
}

// bytes msg = 5;
inline void ChatMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMsg::msg() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.msg)
  return msg_.GetNoArena();
}
inline void ChatMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.msg)
}
#if LANG_CXX11
inline void ChatMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.ChatMsg.msg)
}
#endif
inline void ChatMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.ChatMsg.msg)
}
inline void ChatMsg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.ChatMsg.msg)
}
inline ::std::string* ChatMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.ChatMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMsg::release_msg() {
  // @@protoc_insertion_point(field_release:ik_ChatService.ChatMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.ChatMsg.msg)
}

// int32 groupid = 6;
inline void ChatMsg::clear_groupid() {
  groupid_ = 0;
}
inline ::google::protobuf::int32 ChatMsg::groupid() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.groupid)
  return groupid_;
}
inline void ChatMsg::set_groupid(::google::protobuf::int32 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.groupid)
}

// bytes time = 7;
inline void ChatMsg::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMsg::time() const {
  // @@protoc_insertion_point(field_get:ik_ChatService.ChatMsg.time)
  return time_.GetNoArena();
}
inline void ChatMsg::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatService.ChatMsg.time)
}
#if LANG_CXX11
inline void ChatMsg::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_ChatService.ChatMsg.time)
}
#endif
inline void ChatMsg::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatService.ChatMsg.time)
}
inline void ChatMsg::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatService.ChatMsg.time)
}
inline ::std::string* ChatMsg::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatService.ChatMsg.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMsg::release_time() {
  // @@protoc_insertion_point(field_release:ik_ChatService.ChatMsg.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatService.ChatMsg.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_ChatService

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ChatService_2eproto
